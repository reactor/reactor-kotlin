/*
 * Copyright (c) 2019-Present Pivotal Software Inc, All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
  ext.kotlinVersion = '1.3.72'
  repositories {
		mavenCentral()
		maven {
			//FIXME workaround propdeps not being published to Maven Central + otherwise Gradle somehow tries to load dokka from spring repo
			url "https://repo.spring.io/plugins-release"
			content {
				includeGroup "org.springframework.build.gradle"
			}
		}
  }
  dependencies {
	classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.7'
	classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}"
  }
}

plugins {
  //NB: stdlib version is defined by this plugin's version
  id "org.jetbrains.kotlin.jvm" version "1.3.50"
  id "org.jetbrains.dokka" version "0.10.0"
  id "com.jfrog.artifactory" version "4.15.2" apply false
}

//NOTE: reactor dependency versions are now defined in gradle.properties

configure(rootProject)  { project ->
  apply plugin: 'kotlin'
  apply plugin: 'propdeps'
  apply from: "gradle/publishing.gradle"
  apply from: "gradle/releaser.gradle"

  description = 'Kotlin extensions for Project Reactor'
  group = 'io.projectreactor.kotlin'

	repositories {
		mavenCentral()
		maven { url "https://oss.sonatype.org/content/repositories/releases/" }
		maven { url "https://maven-eclipse.github.io/maven" }
		if (version.endsWith('BUILD-SNAPSHOT')) {
			maven { url 'https://repo.spring.io/snapshot' }
		}
		maven { url 'https://repo.spring.io/milestone' }
	}

  compileJava {
	sourceCompatibility = 1.8
	targetCompatibility = 1.8
  }

  compileTestJava {
	sourceCompatibility = 1.8
	targetCompatibility = 1.8
  }

  tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
	kotlinOptions.jvmTarget = "1.8"
	kotlinOptions.freeCompilerArgs = ["-Xjsr305=strict"]
  }

  dokka {
	dependsOn jar
	group = "documentation"
	description = "Generates Kotlin API documentation."
	outputFormat = "html"
	outputDirectory = new File(project.buildDir, "docs/kdoc")

	configuration {
		moduleName = "reactor-kotlin-extensions"
		jdkVersion = 8

		//due to https://github.com/Kotlin/dokka/issues/514 we now have to specify packageListUrl
		//another dokka release, another regression...
		externalDocumentationLink {
			url = new URL("https://projectreactor.io/docs/core/release/api/")
			packageListUrl = new URL(url, "package-list")
		}
		externalDocumentationLink {
			url = new URL("https://projectreactor.io/docs/test/release/api/")
			packageListUrl = new URL(url, "package-list")
		}
		externalDocumentationLink {
			url = new URL("https://projectreactor.io/docs/extra/release/api/")
			packageListUrl = new URL(url, "package-list")
		}
		externalDocumentationLink {
			url = new URL("https://projectreactor.io/docs/adapter/release/api/")
			packageListUrl = new URL(url, "package-list")
		}
		externalDocumentationLink {
			url = new URL("https://www.reactive-streams.org/reactive-streams-1.0.3-javadoc/")
			packageListUrl = new URL(url, "package-list")
		}
		externalDocumentationLink {
			url = new URL("http://reactivex.io/RxJava/javadoc/")
			packageListUrl = new URL(url, "package-list")
		}
	}
}

	task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
		group = "documentation"
		description = "Generates javadoc for Kotlin API."
		outputFormat = 'javadoc'
		outputDirectory = "$buildDir/javadoc"

		configuration {
			moduleName = "reactor-kotlin-extensions"
			jdkVersion = 8

			//TODO javadoc output spams a little of Can't find node by signature `not implemented for <T
			//see https://github.com/Kotlin/dokka/issues/525

			//due to https://github.com/Kotlin/dokka/issues/514 we now have to specify packageListUrl
			//another dokka release, another regression...
			externalDocumentationLink {
				url = new URL("https://projectreactor.io/docs/core/release/api/")
				packageListUrl = new URL(url, "package-list")
			}
			externalDocumentationLink {
				url = new URL("https://projectreactor.io/docs/test/release/api/")
				packageListUrl = new URL(url, "package-list")
			}
			externalDocumentationLink {
				url = new URL("https://projectreactor.io/docs/extra/release/api/")
				packageListUrl = new URL(url, "package-list")
			}
			externalDocumentationLink {
				url = new URL("https://projectreactor.io/docs/adapter/release/api/")
				packageListUrl = new URL(url, "package-list")
			}
			externalDocumentationLink {
				url = new URL("https://www.reactive-streams.org/reactive-streams-1.0.3-javadoc/")
				packageListUrl = new URL(url, "package-list")
			}
			externalDocumentationLink {
				url = new URL("http://reactivex.io/RxJava/javadoc/")
				packageListUrl = new URL(url, "package-list")
			}
		}
	}

  task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
	archiveClassifier.set('javadoc')
	from dokkaJavadoc.outputDirectory
  }

  task kdocZip(type: Zip, dependsOn: dokka) {
	//ends up similar to javadoc jar: reactor-core-xxxx.RELEASE-kdoc.zip
	archiveClassifier.set('kdoc')
	from(dokka.outputDirectory)
  }

  task sourcesJar(type: Jar, dependsOn: classes) {
	archiveClassifier.set("sources")
	from sourceSets.main.allSource
  }

  dependencies {
	compile "io.projectreactor:reactor-core:${reactorCoreVersion}"
	optional "io.projectreactor:reactor-test:${reactorCoreVersion}"
	optional "io.projectreactor.addons:reactor-adapter:${reactorAddonsVersion}"
	optional "io.projectreactor.addons:reactor-extra:${reactorAddonsVersion}"
	testCompile "io.projectreactor:reactor-test:${reactorCoreVersion}"

	optional "io.reactivex.rxjava2:rxjava:2.2.8"
	optional "org.eclipse.swt:org.eclipse.swt.${getPlatform()}:4.5.2"

	//NB: stdlib version is defined by the kotlin jvm plugin's version
	optional 'org.jetbrains.kotlin:kotlin-stdlib'

	testCompile 'junit:junit:4.12'
	testCompile 'org.assertj:assertj-core:3.12.2'
  }

}


def getPlatform() {
  String osname = System.properties['os.name']
  String osarch = System.properties['os.arch']
  if (osname.toLowerCase(Locale.ROOT).contains('win')) {
	if (osarch.contains("64")) {
	  return "win32.win32.x86_64"
	}
	return "win32.win32.x86"
  }
  if (osname.toLowerCase(Locale.ROOT).contains("nux")) {
	if (osarch.contains("64")) {
	  return "gtk.linux.x86_64"
	}
	return "gtk.linux.x86"
  }
  if (osname.toLowerCase(Locale.ROOT).contains("mac")) {
	return "cocoa.macosx.x86_64"
  }
  throw new RuntimeException("Unknown OS/Arch: " + osname + ", " + osarch)
}